
cmake_minimum_required(VERSION 3.22)

project(TEST)

#Here we add a Cmake Module ably to find GSOAP on your system, and find it
set(CMAKE_MODULE_PATH "${CORBA_DIR}/MsgProcessor/cmake")
include(${CMAKE_MODULE_PATH}/FindGSOAP.cmake)  # Replace 'your_custom_functions' with the actual filename

set(MSG_PROCESSOR_DIR ${CORBA_DIR}/MsgProcessor)

#Create the directory that will host files Generated by GSOAP
file(MAKE_DIRECTORY ${MSG_PROCESSOR_DIR}/Generated)

set (MAIN_CLIENT_SOURCE 
    ${MSG_PROCESSOR_DIR}/myapp.cpp
    ${MSG_PROCESSOR_DIR}/Generated/soapClient.cpp
    ${MSG_PROCESSOR_DIR}/Generated/soapC.cpp
)

set (MAIN_SERVER_SOURCE 
    ${MSG_PROCESSOR_DIR}/MsgProcessor.cpp
    ${MSG_PROCESSOR_DIR}/Generated/soapServer.cpp
    ${MSG_PROCESSOR_DIR}/Generated/soapC.cpp
)

set (WS_INTERFACE_BUILD_TARGET
    MsgProcessor.h 
)

#some files are Generated by gsoap
set_source_files_properties( ${MSG_PROCESSOR_DIR}/Generated/soapServer.cpp	 PROPERTIES GENERATED TRUE ) 
set_source_files_properties( ${MSG_PROCESSOR_DIR}/Generated/soapClient.cpp	 PROPERTIES GENERATED TRUE ) 
set_source_files_properties( ${MSG_PROCESSOR_DIR}/Generated/soapC.cpp	 PROPERTIES GENERATED TRUE ) 

#include .h folders here
include_directories( 
	${MSG_PROCESSOR_DIR}/Generated
)

#add the source files to the client executable
add_executable(GSOAP_SERVER.cgi ${MAIN_SERVER_SOURCE} )

#add the source files to the client executable
add_executable(GSOAP_CLIENT.cgi ${MAIN_CLIENT_SOURCE} )

#Create a cmake target that generate gsoap files
add_custom_command(
    OUTPUT ${MSG_PROCESSOR_DIR}/Generated/soapClient.cpp ${MSG_PROCESSOR_DIR}/Generated/soapServer.cpp ${MSG_PROCESSOR_DIR}/Generated/soapC.cpp
    COMMAND ${GSOAP_SOAPCPP2}  -d ${MSG_PROCESSOR_DIR}/Generated ${MSG_PROCESSOR_DIR}/${WS_INTERFACE_BUILD_TARGET}
    DEPENDS ${MSG_PROCESSOR_DIR}/${WS_INTERFACE_BUILD_TARGET}
    COMMENT "CREATING STUBS AND GLUE CODE"
)
    
add_custom_target(GSOAP_GENERATION_TARGET
	DEPENDS ${MSG_PROCESSOR_DIR}/Generated/soapClient.cpp)

#Make sure that the client is compiled only after gsoap has been processed
add_dependencies(GSOAP_CLIENT.cgi GSOAP_GENERATION_TARGET)
add_dependencies(GSOAP_SERVER.cgi GSOAP_GENERATION_TARGET)

set(Beholder_DIR $ENV{HOME}/lib)
set(BEHOLDER_INC_DIR = /usr/include/Beholder)
find_library(Beholder NAMES libBeholder.so PATHS ${Beholder_DIR})
if (Beholder)
    target_link_libraries(GSOAP_SERVER.cgi PRIVATE Beholder ${GSOAP_CXX_LIBRARIES})
    target_link_libraries(GSOAP_CLIENT.cgi PRIVATE Beholder ${GSOAP_CXX_LIBRARIES})
    target_include_directories(GSOAP_CLIENT.cgi PRIVATE ${BEHOLDER_INC_DIR} ${GSOAP_INCLUDE_DIR})
    target_include_directories(GSOAP_SERVER.cgi PRIVATE ${BEHOLDER_INC_DIR} ${GSOAP_INCLUDE_DIR})
else ()
    message(FATAL_ERROR "Beholder.so not found in " ${Beholder_DIR})
endif ()

if (lin)
    set_target_properties(GSOAP_SERVER.cgi PROPERTIES OUTPUT_NAME "GSOAP_SERVER.cgi")
    set_target_properties(GSOAP_CLIENT.cgi PROPERTIES OUTPUT_NAME "GSOAP_CLIENT.cgi")
    # target_compile_definitions(GSOAP_SERVER PRIVATE LINUX_BUILD)
    # target_compile_definitions(GSOAP_CLIENT PRIVATE LINUX_BUILD)
elseif (win)
    # Windows doesn't use shebangs, so no need to change the name
endif ()