/* soapH.h
   Generated by gSOAP 2.8.131 for /home/cezario/Dev/Beholder/DSMComms/cliente/MsgProcessor.h

gSOAP XML Web services tools
Copyright (C) 2000-2023, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bhldr__DataType_DEFINED
#define SOAP_TYPE_bhldr__DataType_DEFINED

inline void soap_default_bhldr__DataType(struct soap *soap, enum bhldr__DataType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bhldr__DataType
	*a = SOAP_DEFAULT_bhldr__DataType;
#else
	*a = (enum bhldr__DataType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bhldr__DataType(struct soap*, const char*, int, const enum bhldr__DataType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bhldr__DataType2s(struct soap*, enum bhldr__DataType);
SOAP_FMAC3 enum bhldr__DataType * SOAP_FMAC4 soap_in_bhldr__DataType(struct soap*, const char*, enum bhldr__DataType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bhldr__DataType(struct soap*, const char*, enum bhldr__DataType *);

SOAP_FMAC3 enum bhldr__DataType * SOAP_FMAC4 soap_new_bhldr__DataType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bhldr__DataType(struct soap*, const enum bhldr__DataType *, const char*, const char*);

inline int soap_write_bhldr__DataType(struct soap *soap, enum bhldr__DataType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bhldr__DataType(soap, p, "bhldr:DataType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bhldr__DataType(struct soap *soap, const char *URL, enum bhldr__DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bhldr__DataType(soap, p, "bhldr:DataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bhldr__DataType(struct soap *soap, const char *URL, enum bhldr__DataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bhldr__DataType(soap, p, "bhldr:DataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bhldr__DataType(struct soap *soap, const char *URL, enum bhldr__DataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bhldr__DataType(soap, p, "bhldr:DataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum bhldr__DataType * SOAP_FMAC4 soap_get_bhldr__DataType(struct soap*, enum bhldr__DataType *, const char*, const char*);

inline int soap_read_bhldr__DataType(struct soap *soap, enum bhldr__DataType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bhldr__DataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bhldr__DataType(struct soap *soap, const char *URL, enum bhldr__DataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bhldr__DataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bhldr__DataType(struct soap *soap, enum bhldr__DataType *p)
{
	if (::soap_read_bhldr__DataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_bhldr__updateInfo_DEFINED
#define SOAP_TYPE_bhldr__updateInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bhldr__updateInfo(struct soap*, struct bhldr__updateInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bhldr__updateInfo(struct soap*, const struct bhldr__updateInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bhldr__updateInfo(struct soap*, const char*, int, const struct bhldr__updateInfo *, const char*);
SOAP_FMAC3 struct bhldr__updateInfo * SOAP_FMAC4 soap_in_bhldr__updateInfo(struct soap*, const char*, struct bhldr__updateInfo *, const char*);
SOAP_FMAC1 struct bhldr__updateInfo * SOAP_FMAC2 soap_instantiate_bhldr__updateInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct bhldr__updateInfo * soap_new_bhldr__updateInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_bhldr__updateInfo(soap, n, NULL, NULL, NULL);
}

inline struct bhldr__updateInfo * soap_new_req_bhldr__updateInfo(
	struct soap *soap)
{
	struct bhldr__updateInfo *_p = ::soap_new_bhldr__updateInfo(soap);
	if (_p)
	{	::soap_default_bhldr__updateInfo(soap, _p);
	}
	return _p;
}

inline struct bhldr__updateInfo * soap_new_set_bhldr__updateInfo(
	struct soap *soap,
	const std::vector<struct bhldr__dataFormat> & message)
{
	struct bhldr__updateInfo *_p = ::soap_new_bhldr__updateInfo(soap);
	if (_p)
	{	::soap_default_bhldr__updateInfo(soap, _p);
		_p->message = message;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bhldr__updateInfo(struct soap*, const struct bhldr__updateInfo *, const char*, const char*);

inline int soap_write_bhldr__updateInfo(struct soap *soap, struct bhldr__updateInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_bhldr__updateInfo(soap, p), 0) || ::soap_put_bhldr__updateInfo(soap, p, "bhldr:updateInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_bhldr__updateInfo(struct soap *soap, const char *URL, struct bhldr__updateInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__updateInfo(soap, p), 0) || ::soap_put_bhldr__updateInfo(soap, p, "bhldr:updateInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bhldr__updateInfo(struct soap *soap, const char *URL, struct bhldr__updateInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__updateInfo(soap, p), 0) || ::soap_put_bhldr__updateInfo(soap, p, "bhldr:updateInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bhldr__updateInfo(struct soap *soap, const char *URL, struct bhldr__updateInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__updateInfo(soap, p), 0) || ::soap_put_bhldr__updateInfo(soap, p, "bhldr:updateInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct bhldr__updateInfo * SOAP_FMAC4 soap_get_bhldr__updateInfo(struct soap*, struct bhldr__updateInfo *, const char*, const char*);

inline int soap_read_bhldr__updateInfo(struct soap *soap, struct bhldr__updateInfo *p)
{
	if (p)
	{	::soap_default_bhldr__updateInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_bhldr__updateInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bhldr__updateInfo(struct soap *soap, const char *URL, struct bhldr__updateInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bhldr__updateInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bhldr__updateInfo(struct soap *soap, struct bhldr__updateInfo *p)
{
	if (::soap_read_bhldr__updateInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bhldr__registerInfo_DEFINED
#define SOAP_TYPE_bhldr__registerInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bhldr__registerInfo(struct soap*, struct bhldr__registerInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bhldr__registerInfo(struct soap*, const struct bhldr__registerInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bhldr__registerInfo(struct soap*, const char*, int, const struct bhldr__registerInfo *, const char*);
SOAP_FMAC3 struct bhldr__registerInfo * SOAP_FMAC4 soap_in_bhldr__registerInfo(struct soap*, const char*, struct bhldr__registerInfo *, const char*);
SOAP_FMAC1 struct bhldr__registerInfo * SOAP_FMAC2 soap_instantiate_bhldr__registerInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct bhldr__registerInfo * soap_new_bhldr__registerInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_bhldr__registerInfo(soap, n, NULL, NULL, NULL);
}

inline struct bhldr__registerInfo * soap_new_req_bhldr__registerInfo(
	struct soap *soap)
{
	struct bhldr__registerInfo *_p = ::soap_new_bhldr__registerInfo(soap);
	if (_p)
	{	::soap_default_bhldr__registerInfo(soap, _p);
	}
	return _p;
}

inline struct bhldr__registerInfo * soap_new_set_bhldr__registerInfo(
	struct soap *soap,
	const std::vector<struct bhldr__dataFormat> & inputInfo)
{
	struct bhldr__registerInfo *_p = ::soap_new_bhldr__registerInfo(soap);
	if (_p)
	{	::soap_default_bhldr__registerInfo(soap, _p);
		_p->inputInfo = inputInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bhldr__registerInfo(struct soap*, const struct bhldr__registerInfo *, const char*, const char*);

inline int soap_write_bhldr__registerInfo(struct soap *soap, struct bhldr__registerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_bhldr__registerInfo(soap, p), 0) || ::soap_put_bhldr__registerInfo(soap, p, "bhldr:registerInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_bhldr__registerInfo(struct soap *soap, const char *URL, struct bhldr__registerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__registerInfo(soap, p), 0) || ::soap_put_bhldr__registerInfo(soap, p, "bhldr:registerInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bhldr__registerInfo(struct soap *soap, const char *URL, struct bhldr__registerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__registerInfo(soap, p), 0) || ::soap_put_bhldr__registerInfo(soap, p, "bhldr:registerInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bhldr__registerInfo(struct soap *soap, const char *URL, struct bhldr__registerInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__registerInfo(soap, p), 0) || ::soap_put_bhldr__registerInfo(soap, p, "bhldr:registerInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct bhldr__registerInfo * SOAP_FMAC4 soap_get_bhldr__registerInfo(struct soap*, struct bhldr__registerInfo *, const char*, const char*);

inline int soap_read_bhldr__registerInfo(struct soap *soap, struct bhldr__registerInfo *p)
{
	if (p)
	{	::soap_default_bhldr__registerInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_bhldr__registerInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bhldr__registerInfo(struct soap *soap, const char *URL, struct bhldr__registerInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bhldr__registerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bhldr__registerInfo(struct soap *soap, struct bhldr__registerInfo *p)
{
	if (::soap_read_bhldr__registerInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bhldr__registerInfoResponse_DEFINED
#define SOAP_TYPE_bhldr__registerInfoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bhldr__registerInfoResponse(struct soap*, struct bhldr__registerInfoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bhldr__registerInfoResponse(struct soap*, const struct bhldr__registerInfoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bhldr__registerInfoResponse(struct soap*, const char*, int, const struct bhldr__registerInfoResponse *, const char*);
SOAP_FMAC3 struct bhldr__registerInfoResponse * SOAP_FMAC4 soap_in_bhldr__registerInfoResponse(struct soap*, const char*, struct bhldr__registerInfoResponse *, const char*);
SOAP_FMAC1 struct bhldr__registerInfoResponse * SOAP_FMAC2 soap_instantiate_bhldr__registerInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct bhldr__registerInfoResponse * soap_new_bhldr__registerInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_bhldr__registerInfoResponse(soap, n, NULL, NULL, NULL);
}

inline struct bhldr__registerInfoResponse * soap_new_req_bhldr__registerInfoResponse(
	struct soap *soap,
	bool result)
{
	struct bhldr__registerInfoResponse *_p = ::soap_new_bhldr__registerInfoResponse(soap);
	if (_p)
	{	::soap_default_bhldr__registerInfoResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}

inline struct bhldr__registerInfoResponse * soap_new_set_bhldr__registerInfoResponse(
	struct soap *soap,
	bool result)
{
	struct bhldr__registerInfoResponse *_p = ::soap_new_bhldr__registerInfoResponse(soap);
	if (_p)
	{	::soap_default_bhldr__registerInfoResponse(soap, _p);
		_p->result = result;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bhldr__registerInfoResponse(struct soap*, const struct bhldr__registerInfoResponse *, const char*, const char*);

inline int soap_write_bhldr__registerInfoResponse(struct soap *soap, struct bhldr__registerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_bhldr__registerInfoResponse(soap, p), 0) || ::soap_put_bhldr__registerInfoResponse(soap, p, "bhldr:registerInfoResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_bhldr__registerInfoResponse(struct soap *soap, const char *URL, struct bhldr__registerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__registerInfoResponse(soap, p), 0) || ::soap_put_bhldr__registerInfoResponse(soap, p, "bhldr:registerInfoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bhldr__registerInfoResponse(struct soap *soap, const char *URL, struct bhldr__registerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__registerInfoResponse(soap, p), 0) || ::soap_put_bhldr__registerInfoResponse(soap, p, "bhldr:registerInfoResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bhldr__registerInfoResponse(struct soap *soap, const char *URL, struct bhldr__registerInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__registerInfoResponse(soap, p), 0) || ::soap_put_bhldr__registerInfoResponse(soap, p, "bhldr:registerInfoResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct bhldr__registerInfoResponse * SOAP_FMAC4 soap_get_bhldr__registerInfoResponse(struct soap*, struct bhldr__registerInfoResponse *, const char*, const char*);

inline int soap_read_bhldr__registerInfoResponse(struct soap *soap, struct bhldr__registerInfoResponse *p)
{
	if (p)
	{	::soap_default_bhldr__registerInfoResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_bhldr__registerInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bhldr__registerInfoResponse(struct soap *soap, const char *URL, struct bhldr__registerInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bhldr__registerInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bhldr__registerInfoResponse(struct soap *soap, struct bhldr__registerInfoResponse *p)
{
	if (::soap_read_bhldr__registerInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bhldr__lookup_DEFINED
#define SOAP_TYPE_bhldr__lookup_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bhldr__lookup(struct soap*, struct bhldr__lookup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bhldr__lookup(struct soap*, const struct bhldr__lookup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bhldr__lookup(struct soap*, const char*, int, const struct bhldr__lookup *, const char*);
SOAP_FMAC3 struct bhldr__lookup * SOAP_FMAC4 soap_in_bhldr__lookup(struct soap*, const char*, struct bhldr__lookup *, const char*);
SOAP_FMAC1 struct bhldr__lookup * SOAP_FMAC2 soap_instantiate_bhldr__lookup(struct soap*, int, const char*, const char*, size_t*);

inline struct bhldr__lookup * soap_new_bhldr__lookup(struct soap *soap, int n = -1)
{
	return soap_instantiate_bhldr__lookup(soap, n, NULL, NULL, NULL);
}

inline struct bhldr__lookup * soap_new_req_bhldr__lookup(
	struct soap *soap)
{
	struct bhldr__lookup *_p = ::soap_new_bhldr__lookup(soap);
	if (_p)
	{	::soap_default_bhldr__lookup(soap, _p);
	}
	return _p;
}

inline struct bhldr__lookup * soap_new_set_bhldr__lookup(
	struct soap *soap,
	const std::vector<struct bhldr__requestFormat> & input)
{
	struct bhldr__lookup *_p = ::soap_new_bhldr__lookup(soap);
	if (_p)
	{	::soap_default_bhldr__lookup(soap, _p);
		_p->input = input;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bhldr__lookup(struct soap*, const struct bhldr__lookup *, const char*, const char*);

inline int soap_write_bhldr__lookup(struct soap *soap, struct bhldr__lookup const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_bhldr__lookup(soap, p), 0) || ::soap_put_bhldr__lookup(soap, p, "bhldr:lookup", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_bhldr__lookup(struct soap *soap, const char *URL, struct bhldr__lookup const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__lookup(soap, p), 0) || ::soap_put_bhldr__lookup(soap, p, "bhldr:lookup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bhldr__lookup(struct soap *soap, const char *URL, struct bhldr__lookup const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__lookup(soap, p), 0) || ::soap_put_bhldr__lookup(soap, p, "bhldr:lookup", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bhldr__lookup(struct soap *soap, const char *URL, struct bhldr__lookup const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__lookup(soap, p), 0) || ::soap_put_bhldr__lookup(soap, p, "bhldr:lookup", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct bhldr__lookup * SOAP_FMAC4 soap_get_bhldr__lookup(struct soap*, struct bhldr__lookup *, const char*, const char*);

inline int soap_read_bhldr__lookup(struct soap *soap, struct bhldr__lookup *p)
{
	if (p)
	{	::soap_default_bhldr__lookup(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_bhldr__lookup(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bhldr__lookup(struct soap *soap, const char *URL, struct bhldr__lookup *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bhldr__lookup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bhldr__lookup(struct soap *soap, struct bhldr__lookup *p)
{
	if (::soap_read_bhldr__lookup(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bhldr__lookupResponse_DEFINED
#define SOAP_TYPE_bhldr__lookupResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bhldr__lookupResponse(struct soap*, struct bhldr__lookupResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bhldr__lookupResponse(struct soap*, const struct bhldr__lookupResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bhldr__lookupResponse(struct soap*, const char*, int, const struct bhldr__lookupResponse *, const char*);
SOAP_FMAC3 struct bhldr__lookupResponse * SOAP_FMAC4 soap_in_bhldr__lookupResponse(struct soap*, const char*, struct bhldr__lookupResponse *, const char*);
SOAP_FMAC1 struct bhldr__lookupResponse * SOAP_FMAC2 soap_instantiate_bhldr__lookupResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct bhldr__lookupResponse * soap_new_bhldr__lookupResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_bhldr__lookupResponse(soap, n, NULL, NULL, NULL);
}

inline struct bhldr__lookupResponse * soap_new_req_bhldr__lookupResponse(
	struct soap *soap,
	const std::vector<struct bhldr__dataFormat> & data)
{
	struct bhldr__lookupResponse *_p = ::soap_new_bhldr__lookupResponse(soap);
	if (_p)
	{	::soap_default_bhldr__lookupResponse(soap, _p);
		_p->data = data;
	}
	return _p;
}

inline struct bhldr__lookupResponse * soap_new_set_bhldr__lookupResponse(
	struct soap *soap,
	const std::vector<struct bhldr__dataFormat> & data)
{
	struct bhldr__lookupResponse *_p = ::soap_new_bhldr__lookupResponse(soap);
	if (_p)
	{	::soap_default_bhldr__lookupResponse(soap, _p);
		_p->data = data;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bhldr__lookupResponse(struct soap*, const struct bhldr__lookupResponse *, const char*, const char*);

inline int soap_write_bhldr__lookupResponse(struct soap *soap, struct bhldr__lookupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_bhldr__lookupResponse(soap, p), 0) || ::soap_put_bhldr__lookupResponse(soap, p, "bhldr:lookupResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_bhldr__lookupResponse(struct soap *soap, const char *URL, struct bhldr__lookupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__lookupResponse(soap, p), 0) || ::soap_put_bhldr__lookupResponse(soap, p, "bhldr:lookupResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bhldr__lookupResponse(struct soap *soap, const char *URL, struct bhldr__lookupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__lookupResponse(soap, p), 0) || ::soap_put_bhldr__lookupResponse(soap, p, "bhldr:lookupResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bhldr__lookupResponse(struct soap *soap, const char *URL, struct bhldr__lookupResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__lookupResponse(soap, p), 0) || ::soap_put_bhldr__lookupResponse(soap, p, "bhldr:lookupResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct bhldr__lookupResponse * SOAP_FMAC4 soap_get_bhldr__lookupResponse(struct soap*, struct bhldr__lookupResponse *, const char*, const char*);

inline int soap_read_bhldr__lookupResponse(struct soap *soap, struct bhldr__lookupResponse *p)
{
	if (p)
	{	::soap_default_bhldr__lookupResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_bhldr__lookupResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bhldr__lookupResponse(struct soap *soap, const char *URL, struct bhldr__lookupResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bhldr__lookupResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bhldr__lookupResponse(struct soap *soap, struct bhldr__lookupResponse *p)
{
	if (::soap_read_bhldr__lookupResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bhldr__requestFormat_DEFINED
#define SOAP_TYPE_bhldr__requestFormat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bhldr__requestFormat(struct soap*, struct bhldr__requestFormat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bhldr__requestFormat(struct soap*, const struct bhldr__requestFormat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bhldr__requestFormat(struct soap*, const char*, int, const struct bhldr__requestFormat *, const char*);
SOAP_FMAC3 struct bhldr__requestFormat * SOAP_FMAC4 soap_in_bhldr__requestFormat(struct soap*, const char*, struct bhldr__requestFormat *, const char*);
SOAP_FMAC1 struct bhldr__requestFormat * SOAP_FMAC2 soap_instantiate_bhldr__requestFormat(struct soap*, int, const char*, const char*, size_t*);

inline struct bhldr__requestFormat * soap_new_bhldr__requestFormat(struct soap *soap, int n = -1)
{
	return soap_instantiate_bhldr__requestFormat(soap, n, NULL, NULL, NULL);
}

inline struct bhldr__requestFormat * soap_new_req_bhldr__requestFormat(
	struct soap *soap,
	const std::string& infoName,
	const std::string& timestamp)
{
	struct bhldr__requestFormat *_p = ::soap_new_bhldr__requestFormat(soap);
	if (_p)
	{	::soap_default_bhldr__requestFormat(soap, _p);
		_p->infoName = infoName;
		_p->timestamp = timestamp;
	}
	return _p;
}

inline struct bhldr__requestFormat * soap_new_set_bhldr__requestFormat(
	struct soap *soap,
	const std::string& infoName,
	const std::string& timestamp)
{
	struct bhldr__requestFormat *_p = ::soap_new_bhldr__requestFormat(soap);
	if (_p)
	{	::soap_default_bhldr__requestFormat(soap, _p);
		_p->infoName = infoName;
		_p->timestamp = timestamp;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bhldr__requestFormat(struct soap*, const struct bhldr__requestFormat *, const char*, const char*);

inline int soap_write_bhldr__requestFormat(struct soap *soap, struct bhldr__requestFormat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_bhldr__requestFormat(soap, p), 0) || ::soap_put_bhldr__requestFormat(soap, p, "bhldr:requestFormat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_bhldr__requestFormat(struct soap *soap, const char *URL, struct bhldr__requestFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__requestFormat(soap, p), 0) || ::soap_put_bhldr__requestFormat(soap, p, "bhldr:requestFormat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bhldr__requestFormat(struct soap *soap, const char *URL, struct bhldr__requestFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__requestFormat(soap, p), 0) || ::soap_put_bhldr__requestFormat(soap, p, "bhldr:requestFormat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bhldr__requestFormat(struct soap *soap, const char *URL, struct bhldr__requestFormat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__requestFormat(soap, p), 0) || ::soap_put_bhldr__requestFormat(soap, p, "bhldr:requestFormat", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct bhldr__requestFormat * SOAP_FMAC4 soap_get_bhldr__requestFormat(struct soap*, struct bhldr__requestFormat *, const char*, const char*);

inline int soap_read_bhldr__requestFormat(struct soap *soap, struct bhldr__requestFormat *p)
{
	if (p)
	{	::soap_default_bhldr__requestFormat(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_bhldr__requestFormat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bhldr__requestFormat(struct soap *soap, const char *URL, struct bhldr__requestFormat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bhldr__requestFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bhldr__requestFormat(struct soap *soap, struct bhldr__requestFormat *p)
{
	if (::soap_read_bhldr__requestFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bhldr__dataFormat_DEFINED
#define SOAP_TYPE_bhldr__dataFormat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bhldr__dataFormat(struct soap*, struct bhldr__dataFormat *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bhldr__dataFormat(struct soap*, const struct bhldr__dataFormat *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bhldr__dataFormat(struct soap*, const char*, int, const struct bhldr__dataFormat *, const char*);
SOAP_FMAC3 struct bhldr__dataFormat * SOAP_FMAC4 soap_in_bhldr__dataFormat(struct soap*, const char*, struct bhldr__dataFormat *, const char*);
SOAP_FMAC1 struct bhldr__dataFormat * SOAP_FMAC2 soap_instantiate_bhldr__dataFormat(struct soap*, int, const char*, const char*, size_t*);

inline struct bhldr__dataFormat * soap_new_bhldr__dataFormat(struct soap *soap, int n = -1)
{
	return soap_instantiate_bhldr__dataFormat(soap, n, NULL, NULL, NULL);
}

inline struct bhldr__dataFormat * soap_new_req_bhldr__dataFormat(
	struct soap *soap,
	const std::string& infoName,
	const std::string& value,
	const std::string& timestamp,
	enum bhldr__DataType dataType)
{
	struct bhldr__dataFormat *_p = ::soap_new_bhldr__dataFormat(soap);
	if (_p)
	{	::soap_default_bhldr__dataFormat(soap, _p);
		_p->infoName = infoName;
		_p->value = value;
		_p->timestamp = timestamp;
		_p->dataType = dataType;
	}
	return _p;
}

inline struct bhldr__dataFormat * soap_new_set_bhldr__dataFormat(
	struct soap *soap,
	const std::string& infoName,
	const std::string& value,
	const std::string& timestamp,
	enum bhldr__DataType dataType)
{
	struct bhldr__dataFormat *_p = ::soap_new_bhldr__dataFormat(soap);
	if (_p)
	{	::soap_default_bhldr__dataFormat(soap, _p);
		_p->infoName = infoName;
		_p->value = value;
		_p->timestamp = timestamp;
		_p->dataType = dataType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bhldr__dataFormat(struct soap*, const struct bhldr__dataFormat *, const char*, const char*);

inline int soap_write_bhldr__dataFormat(struct soap *soap, struct bhldr__dataFormat const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_bhldr__dataFormat(soap, p), 0) || ::soap_put_bhldr__dataFormat(soap, p, "bhldr:dataFormat", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_bhldr__dataFormat(struct soap *soap, const char *URL, struct bhldr__dataFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__dataFormat(soap, p), 0) || ::soap_put_bhldr__dataFormat(soap, p, "bhldr:dataFormat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bhldr__dataFormat(struct soap *soap, const char *URL, struct bhldr__dataFormat const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__dataFormat(soap, p), 0) || ::soap_put_bhldr__dataFormat(soap, p, "bhldr:dataFormat", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bhldr__dataFormat(struct soap *soap, const char *URL, struct bhldr__dataFormat const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_bhldr__dataFormat(soap, p), 0) || ::soap_put_bhldr__dataFormat(soap, p, "bhldr:dataFormat", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct bhldr__dataFormat * SOAP_FMAC4 soap_get_bhldr__dataFormat(struct soap*, struct bhldr__dataFormat *, const char*, const char*);

inline int soap_read_bhldr__dataFormat(struct soap *soap, struct bhldr__dataFormat *p)
{
	if (p)
	{	::soap_default_bhldr__dataFormat(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_bhldr__dataFormat(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bhldr__dataFormat(struct soap *soap, const char *URL, struct bhldr__dataFormat *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bhldr__dataFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bhldr__dataFormat(struct soap *soap, struct bhldr__dataFormat *p)
{
	if (::soap_read_bhldr__dataFormat(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfbhldr__dataFormat_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfbhldr__dataFormat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfbhldr__dataFormat(struct soap*, std::vector<struct bhldr__dataFormat> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfbhldr__dataFormat(struct soap*, const std::vector<struct bhldr__dataFormat> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfbhldr__dataFormat(struct soap*, const char*, int, const std::vector<struct bhldr__dataFormat> *, const char*);
SOAP_FMAC3 std::vector<struct bhldr__dataFormat> * SOAP_FMAC4 soap_in_std__vectorTemplateOfbhldr__dataFormat(struct soap*, const char*, std::vector<struct bhldr__dataFormat> *, const char*);
SOAP_FMAC1 std::vector<struct bhldr__dataFormat>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfbhldr__dataFormat(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct bhldr__dataFormat>  * soap_new_std__vectorTemplateOfbhldr__dataFormat(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfbhldr__dataFormat(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfbhldr__requestFormat_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfbhldr__requestFormat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfbhldr__requestFormat(struct soap*, std::vector<struct bhldr__requestFormat> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfbhldr__requestFormat(struct soap*, const std::vector<struct bhldr__requestFormat> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfbhldr__requestFormat(struct soap*, const char*, int, const std::vector<struct bhldr__requestFormat> *, const char*);
SOAP_FMAC3 std::vector<struct bhldr__requestFormat> * SOAP_FMAC4 soap_in_std__vectorTemplateOfbhldr__requestFormat(struct soap*, const char*, std::vector<struct bhldr__requestFormat> *, const char*);
SOAP_FMAC1 std::vector<struct bhldr__requestFormat>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfbhldr__requestFormat(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct bhldr__requestFormat>  * soap_new_std__vectorTemplateOfbhldr__requestFormat(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfbhldr__requestFormat(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
