
cmake_minimum_required(VERSION 3.22)

project(TEST)

#Here we add a Cmake Module ably to find GSOAP on your system, and find it
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

# include(${CMAKE_MODULE_PATH}/FindGSOAP.cmake)  # Replace 'your_custom_functions' with the actual filename

if(GSOAP_SOAPCPP2)
    message("Found soapcpp2: ${GSOAP_SOAPCPP2}")
    set (GSOAP_SOAPCPP2 ${GSOAP_SOAPCPP2})
else()
    message(FATAL_ERROR "soapcpp2 not found. Please make sure it is installed and in your PATH.")
endif()

if(GSOAP_WSDL2H)
message("Found wsdl2h: ${GSOAP_WSDL2H}")
set (GSOAP_WSDL2H ${GSOAP_WSDL2H})
else()
message(FATAL_ERROR "soapcpp2 not found. Please make sure it is installed and in your PATH.")
endif()

#Create the directory that will host files generated by GSOAP
file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/generated)

set (MAIN_CLIENT_SOURCE 
    myapp.cpp
    ${CMAKE_BINARY_DIR}/generated/soapClientLib.c	
	${CMAKE_BINARY_DIR}/generated/soapC.c
)

set (MAIN_SERVER_SOURCE 
    hello.cpp
    ${CMAKE_BINARY_DIR}/generated/soapServerLib.c	
	${CMAKE_BINARY_DIR}/generated/soapC.c
)

#some files are generated by gsoap
set_source_files_properties( ${CMAKE_BINARY_DIR}/generated/soapServerLib.c	 PROPERTIES GENERATED TRUE ) 
set_source_files_properties( ${CMAKE_BINARY_DIR}/generated/soapClientLib.c	 PROPERTIES GENERATED TRUE ) 
set_source_files_properties( ${CMAKE_BINARY_DIR}/generated/soapC.c	 PROPERTIES GENERATED TRUE ) 

#include .h folders here
include_directories( 
	${CMAKE_BINARY_DIR}/generated
	${GSOAP_INCLUDE_DIR}	
)

#add the source files to the client executable
add_executable(GSOAP_CLIENT ${MAIN_CLIENT_SOURCE} )

#add the source files to the client executable
add_executable(GSOAP_SERVER ${MAIN_SERVER_SOURCE} )

#Create a cmake target that generate gsoap files
add_custom_command(
	OUTPUT ${CMAKE_BINARY_DIR}/generated/bindings.h
    COMMAND ${GSOAP_WSDL2H} -R -c -o ${CMAKE_BINARY_DIR}/generated/bindings.h ${CMAKE_SOURCE_DIR}/wsdl/ns.wsdl
    COMMENT "CREATING BINDING FILES"
)

#Create a cmake target that generate gsoap files
add_custom_command(
	OUTPUT ${CMAKE_BINARY_DIR}/generated/soapClientLib.c ${CMAKE_BINARY_DIR}/generated/soapServerLib.c ${CMAKE_BINARY_DIR}/generated/soapC.c
    COMMAND ${GSOAP_SOAPCPP2}  -d ${CMAKE_BINARY_DIR}/generated ${CMAKE_BINARY_DIR}/generated/bindings.h 
    DEPENDS ${CMAKE_BINARY_DIR}/generated/bindings.h
    COMMENT "CREATING STUBS AND GLUE CODE"
)

add_custom_target(GSOAP_GENERATION_TARGET_CLIENT
	DEPENDS ${CMAKE_BINARY_DIR}/generated/soapClientLib.c)

#Make sure that the client is compiled only after gsoap has been processed
add_dependencies(GSOAP_CLIENT GSOAP_GENERATION_TARGET_CLIENT)
add_dependencies(GSOAP_SERVER GSOAP_GENERATION_TARGET_CLIENT)

#extra libraries for the executable
target_link_libraries(GSOAP_CLIENT ${GSOAP_C_LIBRARIES} ${GSOAP_CXX_LIBRARIES})
target_link_libraries(GSOAP_SERVER ${GSOAP_C_LIBRARIES} ${GSOAP_CXX_LIBRARIES})